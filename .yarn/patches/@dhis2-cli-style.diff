diff --git a/src/utils/run.js b/src/utils/run.js
index c1347e03ddc5809405b2734c373438e08d89539a..5960280186fa7ba1edcf107f6ad916cf0eaa43c7 100644
--- a/src/utils/run.js
+++ b/src/utils/run.js
@@ -1,7 +1,6 @@
 const path = require('path')
+const fs = require('fs')
 const spawn = require('cross-spawn')
-const findup = require('find-up')
-const { PACKAGE_ROOT } = require('./paths.js')
 
 exports.spawn = (cmd, args, opts) =>
     spawn.sync(cmd, args, {
@@ -19,17 +18,12 @@ exports.run = (cmd, { args, opts }, callback) => {
     )
 }
 
-exports.bin = (cmd, { args, opts }, callback) => {
-    const nodemodules = findup.sync('node_modules', {
-        cwd: PACKAGE_ROOT,
-        type: 'directory',
-        allowSymlinks: true,
-    })
-
-    const binCmd = path.join(nodemodules, '.bin', cmd)
+exports.bin = (packageName, { bin, args, opts }, callback) => {
+    const binFile = findBin(packageName, bin)
+    const yarnArgs = ['node', binFile, ...args]
 
     return handleRun(
-        spawn.sync(binCmd, args, {
+        spawn.sync('yarn', yarnArgs, {
             stdio: 'inherit',
             ...opts,
         }),
@@ -37,6 +31,41 @@ exports.bin = (cmd, { args, opts }, callback) => {
     )
 }
 
+function findBin(packageName, bin) {
+    let pkg
+    try {
+        pkg = require(`${packageName}/package.json`)
+    } catch (e) {
+        throw new Error(`Cannot resolve package ${packageName}`)
+    }
+    const pkgRoot = path.dirname(require.resolve(`${packageName}/package.json`))
+
+    const binName = bin || packageName
+    let binFile
+    if (typeof pkg.bin === 'string') {
+        if (binName === packageName) {
+            binFile = pkg.bin
+        }
+    } else {
+        binFile = pkg.bin[binName]
+    }
+
+    if (!binFile) {
+        throw new Error(
+            `No bin entry for ${binName} found in package ${packageName}`
+        )
+    }
+
+    binFile = path.join(pkgRoot, binFile)
+    if (!fs.existsSync(binFile)) {
+        throw new Error(
+            `Bin entry ${binName} in package ${packageName} points to a file which does not exist (${binFile})`
+        )
+    }
+
+    return binFile
+}
+
 function handleRun(result, callback) {
     if (result.error) {
         throw result.error